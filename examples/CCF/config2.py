"""Configuration file for running a single simple simulation."""
from multiprocessing import cpu_count
from collections import deque
import copy
from icarus.util import Tree

# GENERAL SETTINGS

# Level of logging output
# Available options: DEBUG, INFO, WARNING, ERROR, CRITICAL
LOG_LEVEL = 'INFO'

# If True, executes simulations in parallel using multiple processes
# to take advantage of multicore CPUs
PARALLEL_EXECUTION = True

# Number of processes used to run simulations in parallel.
# This option is ignored if PARALLEL_EXECUTION = False
N_PROCESSES = cpu_count()

# Number of times each experiment is replicated
N_REPLICATIONS = 1

# Granularity of caching.
# Currently, only OBJECT is supported
CACHING_GRANULARITY = 'OBJECT'

# Format in which results are saved.
# Result readers and writers are located in module ./icarus/results/readwrite.py
# Currently only PICKLE is supported
RESULTS_FORMAT = 'PICKLE'

# List of metrics to be measured in the experiments
# The implementation of data collectors are located in ./icaurs/execution/collectors.py
DATA_COLLECTORS = ['CACHE_HIT_RATIO', 'LATENCY', 'PATH_STRETCH', 'LINK_LOAD']

# Queue of experiments
EXPERIMENT_QUEUE = deque()

# Create experiment
experiment = Tree()

# CCF settings 
source_number = 100
IS_BASELINE = False
# If True, read workload and content placement from data 
READ_FROM_DATA = True
IS_ZIPF = True
# Set topology
experiment['topology']['name'] = 'CCF_SCALE'
experiment['topology']['n'] = source_number
# experiment['topology']['delay'] = 1


# Set workload
# ZIPF
if IS_ZIPF:
        experiment['workload'] = {
                'name':       'STATIONARY',
                'n_contents': 10 ** 5,
                'n_warmup':   10 ** 5,
                'n_measured': 2 * 10 ** 5,
                'alpha':      0.00001,
                'rate':       1,
                'is_random':  True
                }
else:
        experiment['workload'] = {
                'name':       'NORMAL',
                'n_contents': 10 ** 5,
                'n_warmup':   10 ** 5,
                'n_measured': 2 * 10 ** 5,
                'rate':       1,
                'is_random':   True
                }

# Set cache placement
if IS_BASELINE:
        experiment['cache_placement']['name'] = 'UNIFORM'
else:
        experiment['cache_placement']['name'] = 'CCF'
        experiment['cache_placement']['cache_allocation'] = [0.007785136676675282, 0.005283149745783625, 0.009061968822243496, 0.007574448096327798, 0.007254234439989959, 0.009393646507826047, 0.007007367729737979, 0.012438373135575406, 0.012466927041800985, 0.008783538222971439, 0.01275946157113067, 0.00966639715387909, 0.011401919670632374, 0.0037592720963470017, 0.014420361690523935, 0.013440380142940342, 0.011595734133595268, 0.014465278326856838, 0.004322145284432624, 0.010973477010680301, 0.010040064162950096, 0.008025701605608834, 0.01272615120645417, 0.009713088417405287, 0.010926229813338451, 0.008260738902492813, 0.010425512782690827, 0.012131239973806881, 0.007348023903693895, 0.009005312702846678, 0.010644018641352544, 0.014144200168270166, 0.005425245308309841, 0.009033931833815113, 0.00614503827856954, 0.015807036434401164, 0.006778343121793816, 0.010202440010991912, 0.013061575394076702, 0.014426655320280958, 0.006787897994852213, 0.008262193535089567, 0.00909401849727308, 0.011005137770088979, 0.009347095908844189, 0.008594462195483491, 0.010481998247182262, 0.010838810748804766, 0.008171599929496853, 0.009786262780138447, 0.007943543016405524, 0.009678854436698945, 0.011562162456303713, 0.011218777308862704, 0.005372073955210914, 0.008256341922865859, 0.00845771369685141, 0.011153686481319782, 0.013970493115218061, 0.009898031262420816, 0.007046401254999441, 0.007892353554222114, 0.014177140903696475, 0.008999556744304684, 0.009650087154609239, 0.009766191972987498, 0.0069609141880179835, 0.012697759389735615, 0.011646525373832591, 0.005754291872461571, 0.00799493262501059, 0.009975776717074723, 0.010288767417449584, 0.014092688696053332, 0.011123029681577551, 0.01230237080330334, 0.008706074997707888, 0.01348827725560945, 0.008737455614201878, 0.010876765377664587, 0.011085013372985775, 0.010163255477675957, 0.010958241357554868, 0.005488905925270465, 0.009241973264155323, 0.01098753871771378, 0.005986082169301273, 0.007305954282792846, 0.014464293333845751, 0.010419478826510812, 0.01328083757759328, 0.00910430123967865, 0.007805501610166856, 0.008247628431284326, 0.010658239369073492, 0.010259009079013762, 0.015546912163028545, 0.012514055047575596, 0.012510603254838241, 0.013789893162908653]
experiment['cache_placement']['network_cache'] = 0.1

# Set content placement
if READ_FROM_DATA:
        experiment['content_placement']['name'] = 'DATA_TO_CCF'
else:
        if IS_ZIPF:
                experiment['content_placement']['name'] = 'WEIGHTED'
                experiment['content_placement']['source_weights'] = {101: 0.007785136677, 102: 0.005283149746, 103: 0.009061968822, 104: 0.007574448096, 105: 0.00725423444, 106: 0.009393646508, 107: 0.00700736773, 108: 0.01243837314, 109: 0.01246692704, 110: 0.008783538223, 111: 0.01275946157, 112: 0.009666397154, 113: 0.01140191967, 114: 0.003759272096, 115: 0.01442036169, 116: 0.01344038014, 117: 0.01159573413, 118: 0.01446527833, 119: 0.004322145284, 120: 0.01097347701, 121: 0.01004006416, 122: 0.008025701606, 123: 0.01272615121, 124: 0.009713088417, 125: 0.01092622981, 126: 0.008260738902, 127: 0.01042551278, 128: 0.01213123997, 129: 0.007348023904, 130: 0.009005312703, 131: 0.01064401864, 132: 0.01414420017, 133: 0.005425245308, 134: 0.009033931834, 135: 0.006145038279, 136: 0.01580703643, 137: 0.006778343122, 138: 0.01020244001, 139: 0.01306157539, 140: 0.01442665532, 141: 0.006787897995, 142: 0.008262193535, 143: 0.009094018497, 144: 0.01100513777, 145: 0.009347095909, 146: 0.008594462195, 147: 0.01048199825, 148: 0.01083881075, 149: 0.008171599929, 150: 0.00978626278, 151: 0.007943543016, 152: 0.009678854437, 153: 0.01156216246, 154: 0.01121877731, 155: 0.005372073955, 156: 0.008256341923, 157: 0.008457713697, 158: 0.01115368648, 159: 0.01397049312, 160: 0.009898031262, 161: 0.007046401255, 162: 0.007892353554, 163: 0.0141771409, 164: 0.008999556744, 165: 0.009650087155, 166: 0.009766191973, 167: 0.006960914188, 168: 0.01269775939, 169: 0.01164652537, 170: 0.005754291872, 171: 0.007994932625, 172: 0.009975776717, 173: 0.01028876742, 174: 0.0140926887, 175: 0.01112302968, 176: 0.0123023708, 177: 0.008706074998, 178: 0.01348827726, 179: 0.008737455614, 180: 0.01087676538, 181: 0.01108501337, 182: 0.01016325548, 183: 0.01095824136, 184: 0.005488905925, 185: 0.009241973264, 186: 0.01098753872, 187: 0.005986082169, 188: 0.007305954283, 189: 0.01446429333, 190: 0.01041947883, 191: 0.01328083758, 192: 0.00910430124, 193: 0.00780550161, 194: 0.008247628431, 195: 0.01065823937, 196: 0.01025900908, 197: 0.01554691216, 198: 0.01251405505, 199: 0.01251060325, 200: 0.01378989316}
                # experiment['content_placement']['name'] = 'UNIFORM'
                # experiment['content_placement']['name'] = 'ZIPF'
                # experiment['content_placement']['alpha'] = 2
                # experiment['content_placement']['is_random'] = True
        else:
                experiment['content_placement']['name'] = 'WEIGHTED'
                experiment['content_placement']['source_weights'] =  {101:0.00717587640843523,102:0.011606998319114535,103:0.006016087462422068,104:0.005914283444656411,105:0.006478692947974536,106:0.01701983388614452,107:0.009232771907510715,108:0.010446519914504274,109:0.012372127879358277,110:0.006617389493274116,111:0.013909778865896052,112:0.012293117744125294,113:0.012236466292915643,114:0.012183361995828337,115:0.015368505108308447,116:0.013123931832263479,117:0.010799471293531582,118:0.013102330782238715,119:0.01939242896055647,120:0.008196294857377372,121:0.00471790075319751,122:0.010875036541833309,123:0.010821059995701607,124:0.00837354072923041,125:0.007295098719931155,126:0.006946804843867024,127:0.011753909219172177,128:0.009604436355013266,129:0.007836806421310627,130:0.01097465988128199,131:0.00964887117185679,132:0.011504482358054718,133:0.0053943876535283335,134:0.008443812810819322,135:0.016909371400624356,136:0.010732076877030473,137:0.011717053229578344,138:0.005745317762057413,139:0.014892072467120075,140:0.010792009389835424,141:0.013205419236338799,142:0.012397802550097455,143:0.007625291581446855,144:0.0050816948253824806,145:0.0067734506207572966,146:0.008462165175090275,147:0.009948317059303267,148:0.010741227071503523,149:0.007946667280533799,150:0.011102180621955603,151:0.005938775438089878,152:0.009608452451930346,153:0.009168847873578892,154:0.009311223614989326,155:0.012295813086927884,156:0.007481589727598484,157:0.010286728469988835,158:0.011162487848685008,159:0.013676754515803588,160:0.010087127421981392,161:0.007132288441510841,162:0.011400923071018925,163:0.010120219076405227,164:0.006533076637398351,165:0.007925263632998513,166:0.008923583843611022,167:0.010702836223288955,168:0.007233139106118823,169:0.016158934557966978,170:0.009580761186267864,171:0.010397146483849252,172:0.0070843102475432644,173:0.012476885274924455,174:0.007284960512230228,175:0.016541249446571045,176:0.0089473810424915,177:0.006894718212777233,178:0.009472585767944644,179:0.006426516096867527,180:0.011303822206294285,181:0.007671169926090509,182:0.008678942449546423,183:0.00843142227343899,184:0.007221212944115158,185:0.01018516451130295,186:0.0021447420890588946,187:0.005376540170627375,188:0.01799135205209311,189:0.011631528467686938,190:0.010405364835610043,191:0.013345225581596324,192:0.0111092880809252,193:0.012994163274706077,194:0.007320169720799727,195:0.0105770804803995,196:0.007067522481773677,197:0.009685571549072642,198:0.009007607007003522,199:0.012937671147973099,200:0.012910665438637932}
                # experiment['content_placement']['name'] = 'NORMAL'
                # experiment['content_placement']['is_random'] = True

# Set cache replacement policy
experiment['cache_policy']['name'] = 'LRU'

# Set caching meta-policy
experiment['strategy']['name'] = 'LCE'

# Description of the experiment

experiment['desc'] = "Line topology with customized cache"

# Append experiment to queue
EXPERIMENT_QUEUE.append(experiment)
